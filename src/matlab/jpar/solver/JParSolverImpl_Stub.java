// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package matlab.jpar.solver;

public final class JParSolverImpl_Stub
    extends java.rmi.server.RemoteStub
    implements matlab.jpar.solver.common.JParSolver, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_executeTask_0;
    private static java.lang.reflect.Method $method_getSolverName_1;
    private static java.lang.reflect.Method $method_kill_2;
    
    static {
	try {
	    $method_executeTask_0 = matlab.jpar.solver.common.JParSolver.class.getMethod("executeTask", new java.lang.Class[] {java.rmi.Remote.class, java.lang.String.class, int.class, java.lang.String.class, java.lang.String.class, java.lang.Object[].class});
	    $method_getSolverName_1 = matlab.jpar.solver.common.JParSolver.class.getMethod("getSolverName", new java.lang.Class[] {});
	    $method_kill_2 = matlab.jpar.solver.common.JParSolver.class.getMethod("kill", new java.lang.Class[] {});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public JParSolverImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of executeTask(Remote, String, int, String, String, Object[])
    public boolean executeTask(java.rmi.Remote $param_Remote_1, java.lang.String $param_String_2, int $param_int_3, java.lang.String $param_String_4, java.lang.String $param_String_5, java.lang.Object[] $param_arrayOf_Object_6)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_executeTask_0, new java.lang.Object[] {$param_Remote_1, $param_String_2, new java.lang.Integer($param_int_3), $param_String_4, $param_String_5, $param_arrayOf_Object_6}, 2708083701312501645L);
	    return ((java.lang.Boolean) $result).booleanValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getSolverName()
    public java.lang.String getSolverName()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getSolverName_1, null, -2062183985136498222L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of kill()
    public void kill()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_kill_2, null, -556565808393701815L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
