// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package matlab.jpar.server;

public final class JParServerImpl_Stub
    extends java.rmi.server.RemoteStub
    implements matlab.jpar.server.common.JParServer, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_getFreeSolver_0;
    private static java.lang.reflect.Method $method_getSolvers_1;
    private static java.lang.reflect.Method $method_killSolvers_2;
    private static java.lang.reflect.Method $method_registerSolver_3;
    
    static {
	try {
	    $method_getFreeSolver_0 = matlab.jpar.server.common.JParServer.class.getMethod("getFreeSolver", new java.lang.Class[] {});
	    $method_getSolvers_1 = matlab.jpar.server.common.JParServer.class.getMethod("getSolvers", new java.lang.Class[] {});
	    $method_killSolvers_2 = matlab.jpar.server.common.JParServer.class.getMethod("killSolvers", new java.lang.Class[] {});
	    $method_registerSolver_3 = matlab.jpar.server.common.JParServer.class.getMethod("registerSolver", new java.lang.Class[] {matlab.jpar.solver.common.JParSolver.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public JParServerImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of getFreeSolver()
    public matlab.jpar.solver.common.JParSolver getFreeSolver()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFreeSolver_0, null, -7349770687673693071L);
	    return ((matlab.jpar.solver.common.JParSolver) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getSolvers()
    public java.lang.String[] getSolvers()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getSolvers_1, null, 3163983494140474997L);
	    return ((java.lang.String[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of killSolvers()
    public void killSolvers()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_killSolvers_2, null, -2779611498217248263L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerSolver(JParSolver)
    public boolean registerSolver(matlab.jpar.solver.common.JParSolver $param_JParSolver_1)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_registerSolver_3, new java.lang.Object[] {$param_JParSolver_1}, -8266115845284842453L);
	    return ((java.lang.Boolean) $result).booleanValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
